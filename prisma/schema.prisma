generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DniType {
  CC
  TI
  O
}

enum Gender {
  M 
  F 
  O
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  S
  C
  V
  D
  M
  U
}

enum DoctorType {
  G
  E
}

model BasicInformation {
  id            String   @id @default(uuid())
  gender        Gender
  bloodType     BloodType
  birthDate     DateTime
  birthPlace    String
  height        String
  weight        String
  maritalStatus MaritalStatus
  occupation    String

  Patient       Patient @relation(fields: [patientId], references: [dniNumber])
  patientId     String   @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ContactInformation {
  id                     String   @id @default(uuid())
  address                String
  phone1                 String
  phone2                 String?
  emergencyContactName   String
  emergencyContactPhone  String
  emergencyContactPhone2 String?

  Patient                Patient @relation(fields: [patientId], references: [dniNumber])
  patientId              String   @unique

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model MedicalInformation {
  id                 String   @id @default(uuid())
  EPSActive          Boolean
  EPSName            String?
  visitedDoctor      Boolean
  doctorType         DoctorType?
  inTreatment        Boolean
  treatmentName      String?
  boneScan           Boolean
  boneScanType       String?

  Patient            Patient @relation(fields: [patientId], references: [dniNumber])
  patientId          String   @unique

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// model HealthInformation {
//   id                 String   @id @default(uuid())
 

//   Patient            Patient @relation(fields: [patientId], references: [dniNumber])
//   patientId          String   @unique

//   createdAt          DateTime @default(now())
//   updatedAt          DateTime @updatedAt
// }

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?  @default("${email.split(\"@\")[0]}")
  username  String   @unique
  password  String   
  photoURL  String?  @default("https://source.boringavatars.com/marble/50/${username}")

  workspaces Workspace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id        String   @id @default(uuid())
  name      String   @unique
  
  users     User[]
  patients  Patient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id                    String     @id     @default(uuid())
  name                  String
  dniType               DniType            @default(CC)
  dniNumber             String             @unique
  email                 String
  reasonForConsultation String             @default("")
  currentIllness        String             @default("")
  photoURL              String?            @default("https://source.boringavatars.com/marble/50/${dniNumber}")
  workspace             Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId           String             

  BasicInformation      BasicInformation? 
  ContactInformation    ContactInformation?
  MedicalInformation    MedicalInformation?
  Treatment             Treatment?         
  // HealthInformation     HealthInformation?

  termsAndConditions    Boolean            @default(true)
  hasExtraInfo          Boolean            @default(false)   
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

model Cavities {
  id               String   @id @default(uuid())
  center           Int
  top              Int
  bottom           Int
  left             Int
  right            Int

  Tooth            Tooth?   @relation(fields: [toothId], references: [id])
  toothId          String   @unique
}

model Tooth {
  id                  String           @id @default(uuid())
  cavities            Cavities?
  tooth               Int
  extract             Int 
  absent              Int
  crown               Int
  endodontics         Int
  filter              Int
  unerupted           Int
  implant             Int
  regeneration        Int


  InitialOdontogram   InitialOdontogram @relation(fields: [initialOdontogramId], references: [id])
  initialOdontogramId String            
}

model InitialOdontogram {
  id           String    @id @default(uuid())
  Tooth        Tooth[]

  Treatment    Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId  String    @unique

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model RealTxPlan {
  id           String    @id @default(uuid())
  txPhase      String
  txActivity   String
  txETT        String
  txETTUnit    String
  txStartDate  String
  txPrice      String
  txActive     Boolean?  @default(true)

  Treatment    Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId  String    

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt  
}

model TxEvolution {
  id            String    @id @default(uuid())
  txEvolDate    String
  txEvolDesc    String
  txEvolDoc     String
  txEvolPayment String
  txEvolActive  Boolean?  @default(true)

  Treatment     Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId   String    

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt  
}

model Treatment {
  id                  String             @id @default(uuid())
  diagnosis           String
  prognosis           String

  Patient             Patient?          @relation(fields: [patientId], references: [dniNumber])
  patientId           String            @unique
  InitialOdontogram   InitialOdontogram?
  RealTxPlan          RealTxPlan[]
  TxEvolutions         TxEvolution[]

  totalPrice          Float              @default(0)
  totalPaid           Float              @default(0)
  totalPending        Float              @default(0)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}